package com.kodlamaio.kodlamaio.business.concretes;

import java.util.List;

import org.springframework.stereotype.Service;

import com.kodlamaio.kodlamaio.business.abstracts.ApplicantService;
import com.kodlamaio.kodlamaio.business.abstracts.ApplicationService;
import com.kodlamaio.kodlamaio.business.abstracts.BlackListService;
import com.kodlamaio.kodlamaio.business.request.CreateApplicationRequest;
import com.kodlamaio.kodlamaio.business.request.UpdateApplicationRequest;
import com.kodlamaio.kodlamaio.business.response.CreateApplicationResponse;
import com.kodlamaio.kodlamaio.business.response.GetAllApplicationResponses;
import com.kodlamaio.kodlamaio.business.response.GetApplicationResponses;
import com.kodlamaio.kodlamaio.business.response.UpdateApplicationResponse;
import com.kodlamaio.kodlamaio.core.utilities.mapping.ModelMapperService;
import com.kodlamaio.kodlamaio.core.utilities.results.DataResult;
import com.kodlamaio.kodlamaio.core.utilities.results.Result;
import com.kodlamaio.kodlamaio.core.utilities.results.SuccessResult;
import com.kodlamaio.kodlamaio.dataAccess.abstracts.ApplicationRepository;

import lombok.AllArgsConstructor;

@AllArgsConstructor
@Service

public class ApplicationManager  implements ApplicationService{

	private ApplicationRepository applicationRepository;
    private BlackListService blackListService;
    private ApplicantService applicantService;
    private BootCampService bootCampService;
    private ModelMapperService modelMapperService;
	@Override
	public Result delete(int id) {
		checkIfApplicationExistById(id);
        this.applicationRepository.deleteById(id);
        return new SuccessResult(Messages.ApplicationDeleted);
	}

	@Override
	public DataResult<CreateApplicationResponse> add(CreateApplicationRequest createApplicationRequest) {
		checkIfApplicantExists(createdApplicationRequest.getApplicantId());
        checkIfBootcampExists(createdApplicationRequest.getBootcampId());
        blacklistService.checkIfApplicantIsInBlacklist(createdApplicationRequest.getApplicantId());
        Applications application = this.modelMapperService.forRequest().map(createdApplicationRequest,
                Applications.class);
        this.applicationReposities.save(application);

        CreateApplicationResponse createApplicationResponse = this.modelMapperService.forResponse().map(application,
                CreateApplicationResponse.class);
        return new SuccessDataResult<CreateApplicationResponse>(createApplicationResponse, Messages.ApplicationCreated);
	}

	@Override
	public DataResult<List<GetAllApplicationResponses>> GetAll() {
		List<Applications> applications = this.applicationReposities.findAll();
        List<GetAllApplicationResponses> response = applications.stream().map(application -> this.modelMapperService
                .forResponse().map(applications, GetAllApplicationResponses.class)).collect(Collectors.toList());
        return new SuccessDataResult<List<GetAllApplicationResponses>>(response);
	}

	@Override
	public DataResult<UpdateApplicationResponse> update(UpdateApplicationRequest updateApplicationRequest) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DataResult<GetApplicationResponses> getById(int id) {
		// TODO Auto-generated method stub
		return null;
	}

	
	
	
	
}
