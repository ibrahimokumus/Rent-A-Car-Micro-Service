package com.kodlamaio.kodlamaio.business.concretes;

import java.util.List;

import org.springframework.stereotype.Service;

import com.kodlamaio.kodlamaio.business.abstracts.ApplicantService;
import com.kodlamaio.kodlamaio.business.abstracts.BlackListService;
import com.kodlamaio.kodlamaio.business.contstants.Messages;
import com.kodlamaio.kodlamaio.business.request.CreateBlackListRequest;
import com.kodlamaio.kodlamaio.business.request.UpdateBlackListRequest;
import com.kodlamaio.kodlamaio.business.response.CreateBlackListResponse;
import com.kodlamaio.kodlamaio.business.response.GetAllBlackListResponse;
import com.kodlamaio.kodlamaio.business.response.GetBlackListResponse;
import com.kodlamaio.kodlamaio.business.response.UpdateBlackListResponse;
import com.kodlamaio.kodlamaio.core.utilities.exceptions.BusinessException;
import com.kodlamaio.kodlamaio.core.utilities.mapping.ModelMapperService;
import com.kodlamaio.kodlamaio.core.utilities.results.DataResult;
import com.kodlamaio.kodlamaio.core.utilities.results.Result;
import com.kodlamaio.kodlamaio.dataAccess.abstracts.ApplicationRepository;
import com.kodlamaio.kodlamaio.dataAccess.abstracts.BlackListRepository;
import com.kodlamaio.kodlamaio.entity.user.BlackList;

import lombok.AllArgsConstructor;

@AllArgsConstructor
@Service
public class BlackListManager implements BlackListService{

	private BlackListRepository blacklistRepository;
    private ApplicationRepository applicationReposities;
    private ModelMapperService modelMapperService;
    private ApplicantService applicantService;
	@Override
	public Result delete(int id) {
		checkIfBlacklistExistById(id);
        this.blacklistRepository.deleteById(id);
        return new SuccessResult(Messages.BlacklistDeleted);
	}

	@Override
	public DataResult<CreateBlackListResponse> add(CreateBlackListRequest createBlackListRequest) {
		checkIfApplicantIsInBlacklist(createBlackListRequest.getApplicantId());
        applicantService.checkIfUserIsApplicant(createBlackListRequest.getApplicantId());
        BlackList blacklist = this.modelMapperService.forRequest().map(createBlackListRequest, Blacklist.class);
        this.blacklistRepository.save(blacklist);

        CreateBlacklistResponse createBlacklistResponse = this.modelMapperService.forResponse().map(blacklist,
                CreateBlacklistResponse.class);
        return new SuccessDataResult<>(createBlacklistResponse, Messages.BlacklistCreated);
	}

	@Override
	public DataResult<List<GetAllBlackListResponse>> getAll() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DataResult<UpdateBlackListResponse> Update(UpdateBlackListRequest updateBlackListRequest) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DataResult<GetBlackListResponse> getById(int id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void checkIfApplicantIsInBlacklist(int applicantId) {
		// TODO Auto-generated method stub
		
	}

	private void checkIfBlacklistExistById(int id) {
        if (!blacklistRepository.existsById(id)) {
            applicationReposities.deleteById(id);
            throw new BusinessException(Messages.BlacklistNotExists);
        }
    }
	
	
}
