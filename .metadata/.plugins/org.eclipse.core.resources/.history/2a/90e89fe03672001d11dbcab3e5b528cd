package com.kodlamaio.inventoryService.business.concretes;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.kodlamaio.inventoryService.business.abstracts.CarService;
import com.kodlamaio.inventoryService.business.request.create.CreateCarRequest;
import com.kodlamaio.inventoryService.business.request.update.UpdateCarRequest;
import com.kodlamaio.inventoryService.business.response.create.CreateCarResponse;
import com.kodlamaio.inventoryService.business.response.get.GetAllCarResponse;
import com.kodlamaio.inventoryService.business.response.update.UpdateCarResponse;
import com.kodlamaio.inventoryService.dataAccess.abstracts.CarRepository;
import com.kodlamaio.inventoryService.entities.Car;
import com.kodlamaio.inventoryService.entities.CarState;
import com.kodlamaoi.common.utilities.exceptions.BusinessException;
import com.kodlamaoi.common.utilities.mapping.ModelMapperService;

import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor

public class CarManager implements CarService {
	private CarRepository carRepository;
	private ModelMapperService modelMapperService;

	@Override
	public List<GetAllCarResponse> getAll() {
		
		List<Car> cars = this.carRepository.findAll();

		List<GetAllCarResponse> response = cars.stream()
				.map(car -> this.modelMapperService.forResponse().map(car, GetAllCarResponse.class))
				.collect(Collectors.toList());

		return response;
		
	}

	@Override
	public CreateCarResponse add(CreateCarRequest createCarRequest) {
		checkIfCarExistsByPlate(createCarRequest.getPlate());
		Car car = this.modelMapperService.forRequest().map(createCarRequest, Car.class);
		car.setId(UUID.randomUUID().toString());
		
		this.carRepository.save(car);
		
		CreateCarResponse createCarResponse = this.modelMapperService.forResponse().map(car, CreateCarResponse.class);
		return createCarResponse;
	}

	

	@Override
	public void delete(String id) {
		checkIfCarExistById(id);
		this.carRepository.findById(id);
		
	}

	@Override
	public UpdateCarResponse update(UpdateCarRequest updateCarRequest) {
		checkIfCarExistById(updateCarRequest.getId());
        Car car = this.modelMapperService.forRequest().map(updateCarRequest, Car.class);
        this.carRepository.save(car);
        UpdateCarResponse response = this.modelMapperService.forResponse().map(car,
                UpdateCarResponse.class);
        return response;
    }
	
	@Override
	public void changeCarState(String id) {
		checkIfCarExistById(id);
		Car car=this.carRepository.findById(id);
		car.setState(CarState.NOT_AVAILABLE);
		
		
	}

	@Override
	public void changeCarState(String oldCarId, String newCarId) {
		checkIfCarExistById(oldCarId);
		checkIfCarExistById(newCarId);
		Car oldCar=this.carRepository.findById(oldCarId);
		Car newCar=this.carRepository.findById(newCarId);
		oldCar.setState(CarState.AVAILABLE);
		newCar.setState(CarState.NOT_AVAILABLE);
		carRepository.save(oldCar);
		carRepository.save(newCar);

		
	}
	
	private void checkIfCarExistsByPlate(String plate) {
		Car currentBrand = this.carRepository.findByPlate(plate);
		if(currentBrand!=null) {
		    throw new BusinessException("CAR.EXISTS");
		}
	}
	
	private void checkIfCarExistById(String id) {
        if (carRepository.findById(id) == null)
            throw new BusinessException("CAR NOT FOUND");
    }

	
}
